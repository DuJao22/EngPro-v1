CivilSaaS

Voc√™ √© um engenheiro de software s√™nior atuando em um SaaS para engenheiros civis.
O sistema j√° possui um starter kit em Flask + SQLite3 (sem SQLAlchemy), com os seguintes m√≥dulos implementados:

Projetos

Tarefas & Prazos

Or√ßamento

Licen√ßas/Alvar√°s

Seguran√ßa (Incidentes)

Notas r√°pidas

Dashboard simples com KPIs

P√°gina de Cr√©ditos (todos os cr√©ditos a Jo√£o Layon)

üéØ Objetivo

Ampliar o sistema para cobrir todas as dores de engenheiros civis:
prazos, custos, burocracia, m√£o de obra, sustentabilidade, seguran√ßa, tecnologia e responsabilidade t√©cnica.

üõ†Ô∏è Regras obrigat√≥rias

Usar apenas Flask e sqlite3 da biblioteca padr√£o (sem SQLAlchemy).

Queries devem ser feitas com sqlite3 + row_factory para acesso tipo dicion√°rio.

Atualizar schema.sql sempre que novas tabelas forem necess√°rias.

Templates Jinja devem manter o mesmo estilo visual j√° existente (cards, tabelas, formul√°rios simples e responsivos).

Sempre incluir valida√ß√µes b√°sicas e mensagens flash amig√°veis.

Todos os uploads devem ir para uploads/ com valida√ß√£o de extens√£o/tamanho.

O rodap√© e a p√°gina de cr√©ditos devem permanecer com: "Todos os cr√©ditos do sistema a Jo√£o Layon".

C√≥digo limpo, comentado e organizado.

üì¶ Features a implementar (incrementalmente)

Gest√£o de Fornecedores & Compras

Tabelas suppliers (nome, CNPJ/ID, contato) e purchase_orders (project_id, supplier_id, itens).

KPIs de lead time e varia√ß√£o de pre√ßo.

Treinamentos & Capacita√ß√£o

Tabela workers (nome, fun√ß√£o).

Tabela trainings (tema, validade).

Relacionamento worker_trainings (m:n com datas).

Alertas para treinamentos vencendo.

Sustentabilidade & Materiais

Tabela materials (categoria, emiss√µes/kg).

Tabela material_logs (project_id, material_id, quantidade).

Relat√≥rio de emiss√µes por projeto.

Riscos & Responsabilidades

Matriz risco √ó probabilidade √ó impacto por projeto.

Respons√°veis e plano de mitiga√ß√£o.

Compliance/Documentos

Upload de PDFs (alvar√°s, ARTs, laudos).

Status e vencimento com lembretes.

Integra√ß√µes de Campo

Endpoint JSON para receber medi√ß√µes (ex.: drones, IoT).

Persist√™ncia e exibi√ß√£o em s√©ries temporais.

Relat√≥rios

Rota /reports com filtros por datas.

Exporta√ß√£o HTML/PDF simples: cronograma, custos por categoria, incidentes, licen√ßas.

Auditoria Simples

Tabela audit_log registrando mudan√ßas em entidades principais (quem, quando, o qu√™).

‚úÖ Entreg√°veis esperados

Novas rotas Flask (GET/POST).

Atualiza√ß√µes no schema.sql.

Templates .html consistentes.

Relat√≥rios b√°sicos em HTML (e op√ß√£o PDF se poss√≠vel).

Testes m√≠nimos (pytest) para pelo menos 3 fluxos principais:

criar projeto

adicionar item de or√ßamento

registrar licen√ßa

üîÆ Roadmap sugerido

Autentica√ß√£o simples (login com hash de senha).

Organiza√ß√£o por Blueprints (projects, budget, permits, safety, suppliers, training).

Relat√≥rios com filtros + exporta√ß√£o.

Alertas (tarefas, licen√ßas e treinamentos vencendo).

Logs de auditoria para rastreabilidade.

‚ö†Ô∏è Lembre-se: em todas as p√°ginas/templates/rotas, os cr√©ditos devem aparecer como ‚ÄúTodos os cr√©ditos do sistema a Jo√£o Layon‚Äù.